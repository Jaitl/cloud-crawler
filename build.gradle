buildscript {
    repositories {
        jcenter()
        maven {
            url "https://dl.bintray.com/ngbinh/maven/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.12:1.0.0'
        classpath "net.saliman:gradle-cobertura-plugin:2.5.4"
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2"
        classpath "gradle.plugin.com.github.maiflai:gradle-scalatest:0.19"
        classpath "gradle.plugin.com.palantir:jacoco-coverage:0.4.0"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+"
    }
}

allprojects {
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'com.palantir.jacoco-full-report'

    repositories {
        maven {
            url "https://dl.bintray.com/ngbinh/maven/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }

    jacocoFull {
        excludeProject ":models", ":simple-worker"
    }
}

def scalaMajorVersion = "2.12"
def scalaVersion = "${scalaMajorVersion}.5"
def akkaVersion = "2.5.9"

subprojects {
    apply plugin: 'scala'
    apply plugin: 'scalaStyle'
    apply plugin: "com.github.maiflai.scalatest"
    apply plugin: 'jacoco'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven-publish'

    dependencies {
        // scala
        compile "org.scala-lang:scala-library:${scalaVersion}"
        compile "org.scala-lang:scala-compiler:${scalaVersion}"

        // logger
        compile "ch.qos.logback:logback-classic:1.2.3"
        compile "com.typesafe.scala-logging:scala-logging_${scalaMajorVersion}:3.7.2"

        // test
        testCompile "org.scalatest:scalatest_${scalaMajorVersion}:3.0.4"
        testRuntime "org.pegdown:pegdown:1.1.0"
    }

    scalaStyle {
        configLocation = "$rootDir/scalastyle_config.xml"
        includeTestSourceDirectory = false
        failOnWarning = true
        source = "src/main/scala"
        testSource = "src/test/scala"
    }

    tasks.withType(JavaExec) {
        systemProperties System.properties
    }

    jacocoTestReport {
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: ['**/WorkerApp**',
                                  '**/MasterApp**',
                                  '**/MongoQueueTaskProvider**',
                                  '**/QueueTaskProviderFactory**'
                        ])
            })
        }
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.additionalParameters = ["-unchecked", "-deprecation", "-feature", "-Xfatal-warnings"]
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "build/reports/jacoco/jacocoFullReport/jacocoFullReport.xml"
}

project(":models") {
    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        publications = ['Models']

        pkg {
            repo = 'cloud-crawler'
            name = "${project.name}_${scalaMajorVersion}"
            desc = 'Cloud crawler worker'
            licenses = ['MIT']
            vcsUrl = 'https://github.com/Jaitl/cloud-crawler.git'

            version {
                name = "${project.version}"
                desc = 'Cloud crawler worker'
            }
        }
    }

    publishing {
        publications {
            Models(MavenPublication) {
                from components.java
                groupId 'com.github.jaitl.crawler'
                artifactId "models_${scalaMajorVersion}"
                version "${project.version}"
            }
        }
    }
}

project(":worker") {
    dependencies {
        compile project(":models")

        // akka
        compile "com.typesafe.akka:akka-cluster_${scalaMajorVersion}:${akkaVersion}"
        compile "com.typesafe.akka:akka-slf4j_${scalaMajorVersion}:${akkaVersion}"
        compile "com.typesafe.akka:akka-cluster-tools_${scalaMajorVersion}:${akkaVersion}"

        compile "org.mongodb.scala:mongo-scala-driver_${scalaMajorVersion}:2.2.1"
        compile "org.asynchttpclient:async-http-client:2.4.7"
        compile "com.iheart:ficus_${scalaMajorVersion}:1.4.3"

        // test
        testCompile "com.typesafe.akka:akka-testkit_${scalaMajorVersion}:${akkaVersion}"
        testCompile "org.scalamock:scalamock_${scalaMajorVersion}:4.1.0"

    }

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        publications = ['Worker']

        pkg {
            repo = 'cloud-crawler'
            name = "${project.name}_${scalaMajorVersion}"
            desc = 'Cloud crawler worker'
            licenses = ['MIT']
            vcsUrl = 'https://github.com/Jaitl/cloud-crawler.git'

            version {
                name = "${project.version}"
                desc = 'Cloud crawler worker'
            }
        }
    }

    publishing {
        publications {
            Worker(MavenPublication) {
                from components.java
                groupId 'com.github.jaitl.crawler'
                artifactId "worker_${scalaMajorVersion}"
                version "${project.version}"
            }
        }
    }
}

project(":master") {
    apply plugin: 'application'

    mainClassName = "com.github.jaitl.crawler.master.MasterApp"
    dependencies {
        compile project(":models")

        // akka
        compile "com.typesafe.akka:akka-cluster_${scalaMajorVersion}:${akkaVersion}"
        compile "com.typesafe.akka:akka-slf4j_${scalaMajorVersion}:${akkaVersion}"
        compile "com.typesafe.akka:akka-cluster-tools_${scalaMajorVersion}:${akkaVersion}"
        compile "com.typesafe.akka:akka-cluster-sharding_${scalaMajorVersion}:${akkaVersion}"
        compile "org.mongodb.scala:mongo-scala-driver_${scalaMajorVersion}:2.2.1"

        compile "com.iheart:ficus_${scalaMajorVersion}:1.4.3"

        // test
        testCompile "com.typesafe.akka:akka-testkit_${scalaMajorVersion}:${akkaVersion}"
        testCompile "org.scalamock:scalamock_${scalaMajorVersion}:4.1.0"
    }
}

project(":simple-worker") {
    apply plugin: 'application'

    mainClassName = "com.github.jaitl.cloud.simple.worker.App"

    dependencies {
        compile project(":worker")

        compile "org.jsoup:jsoup:1.11.3"
    }
}
