include "common-config.conf"

worker {
  blocking-io-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 32
    }
    throughput = 1
  }

  manager {
    executeInterval = 1.seconds
    executeInterval = ${?WORKER_EXECUTE_INTERVAL}
    runExecutionTimeoutCheckInterval = 1.minute
    batchExecutionTimeout = 1.hour
    batchExecutionTimeout = ${?WORKER_BATCH_EXECUTION_TIMEOUT}
  }

  resource-controller {
    maxFailCount = 3
    maxFailCount = ${?WORKER_MAX_RESOURCE_FAIL_COUNT}
  }

  save-controller {
    saveInterval = 1.minutes
    saveInterval = ${?WORKER_AUTO_SAVE_INTERVAL}
  }

  task-batch-controller {
    maxAttempts = 3
    maxAttempts = ${?WORKER_TASK_BATCH_MAX_ATTEMPTS}
    executeInterval = 100.millis
    executeInterval = ${?WORKER_TASK_BATCH_EXECUTE_INTERVAL}
  }
}

master {
  grpc {
    host = "localhost"
    host = ${?MASTER_GRPC_HOST}
    port = 8321
    port = ${?MASTER_GRPC_PORT}
  }
}

clustering {
  ip = ${?HOSTNAME}
  ip = ${?CLUSTER_IP}
  port = 1606
  port = ${?CLUSTER_PORT}
  seed-ip = ${?HOSTNAME}
  seed-ip = ${?SEED_PORT_1600_TCP_ADDR}
  seed-port = 1600
  seed-port = ${?SEED_PORT_1600_TCP_PORT}
  cluster.name = clustering-cluster
}

akka {
  loggers = [akka.event.slf4j.Slf4jLogger]
  loglevel = debug
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    debug {
      receive = off
      lifecycle = off
    }
    serializers {
      java = "akka.serialization.JavaSerializer"
    }
  }
  remote {
    log-remote-lifecycle-events = on
    netty.tcp {
      hostname = ${clustering.ip}
      port = ${clustering.port}
    }
  }
  cluster {
    seed-nodes = [
      "akka.tcp://"${clustering.cluster.name}"@"${clustering.seed-ip}":"${clustering.seed-port}
    ]
    auto-down-unreachable-after = 10s
    roles = ["worker"]
  }
}
